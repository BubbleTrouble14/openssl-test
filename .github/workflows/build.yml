name: Build NDK Ports

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  detect-projects:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get all projects
        id: set-matrix
        run: |
          # Use grep to find include statements and awk to extract project names from settings.gradle.kts
          projects=$(grep "include" settings.gradle.kts | awk -F'"' '{print $2}' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Found projects: $projects"
          echo "matrix={\"project\":$projects}" >> $GITHUB_OUTPUT

  build:
    needs: detect-projects
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-projects.outputs.matrix)}}
      fail-fast: false
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get version
        id: get_version
        run: |
          # Check if the file exists first
          if [ ! -f "${{ matrix.project }}/build.gradle.kts" ]; then
            echo "Error: build.gradle.kts not found in ${{ matrix.project }} directory"
            exit 1
          fi

          VERSION=$(grep "val portVersion = " ${{ matrix.project }}/build.gradle.kts | sed 's/.*"\(.*\)".*/\1/')
          if [[ -z "$VERSION" ]]; then
            echo "Failed to extract version"
            echo "Content of ${{ matrix.project }}/build.gradle.kts:"
            cat ${{ matrix.project }}/build.gradle.kts | grep -A 1 -B 1 "portVersion"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          local-cache: true

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build ${{ matrix.project }}
        run: |
          ./gradlew :${{ matrix.project }}:distZip \
            -PndkPath=$ANDROID_NDK_HOME \
            -Psigning.gnupg.keyName=${{ secrets.GPG_KEY_ID }} \
            -Psigning.gnupg.passphrase=${{ secrets.GPG_PASSPHRASE }}

      - name: Prepare release artifacts
        run: |
          cd build/distributions
          # Get the existing zip file name
          ZIP_FILE=$(ls *.zip)
          # Generate checksums without renaming
          sha256sum "$ZIP_FILE" > "$ZIP_FILE.sha256"
          sha1sum "$ZIP_FILE" > "$ZIP_FILE.sha1"
          # Generate signature
          gpg --armor --detach-sign "$ZIP_FILE"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project }}-build-artifacts
          path: |
            build/distributions/${{ matrix.project }}-${{ steps.get_version.outputs.version }}.zip
            build/distributions/${{ matrix.project }}-${{ steps.get_version.outputs.version }}.zip.asc
            build/distributions/${{ matrix.project }}-${{ steps.get_version.outputs.version }}.zip.sha1
            build/distributions/${{ matrix.project }}-${{ steps.get_version.outputs.version }}.zip.sha256

  publish:
    needs: [build, detect-projects]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix: ${{fromJson(needs.detect-projects.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.project }}-build-artifacts
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/${{ matrix.project }}-*.zip
            artifacts/${{ matrix.project }}-*.asc
            artifacts/${{ matrix.project }}-*.sha1
            artifacts/${{ matrix.project }}-*.sha256
          tag_name: ${{ matrix.project }}-${{ needs.build.outputs.version }}
          name: ${{ matrix.project }} ${{ needs.build.outputs.version }}
          body: |
            ${{ matrix.project }} version ${{ needs.build.outputs.version }}

            ## Verification
            ```bash
            # Verify signature
            gpg --verify ${{ matrix.project }}-${{ needs.build.outputs.version }}.zip.asc ${{ matrix.project }}-${{ needs.build.outputs.version }}.zip

            # Verify checksums
            sha256sum -c ${{ matrix.project }}-${{ needs.build.outputs.version }}.zip.sha256
            sha1sum -c ${{ matrix.project }}-${{ needs.build.outputs.version }}.zip.sha1
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
# name: Build NDK Ports

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#   workflow_dispatch:

# jobs:
#   detect-projects:
#     runs-on: ubuntu-latest
#     outputs:
#       matrix: ${{ steps.set-matrix.outputs.matrix }}
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           submodules: true

#       - name: Get all projects
#         id: set-matrix
#         run: |
#           # Use grep to find include statements and awk to extract project names from settings.gradle.kts
#           projects=$(grep "include" settings.gradle.kts | awk -F'"' '{print $2}' | jq -R -s -c 'split("\n") | map(select(length > 0))')
#           echo "Found projects: $projects"
#           echo "matrix={\"project\":$projects}" >> $GITHUB_OUTPUT

#   build:
#     needs: detect-projects
#     runs-on: ubuntu-latest
#     strategy:
#       matrix: ${{fromJson(needs.detect-projects.outputs.matrix)}}
#       fail-fast: false

#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up JDK
#         uses: actions/setup-java@v4
#         with:
#           java-version: "17"
#           distribution: "temurin"

#       - name: Set up Android NDK
#         uses: nttld/setup-ndk@v1
#         with:
#           ndk-version: r25c
#           local-cache: true

#       - name: Import GPG key
#         uses: crazy-max/ghaction-import-gpg@v6
#         with:
#           gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
#           passphrase: ${{ secrets.GPG_PASSPHRASE }}

#       - name: Setup Gradle
#         uses: gradle/actions/setup-gradle@v3

#       - name: Import GPG key
#         uses: crazy-max/ghaction-import-gpg@v6
#         with:
#           gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
#           passphrase: ${{ secrets.GPG_PASSPHRASE }}

#       - name: Build ${{ matrix.project }}
#         run: |
#           ./gradlew :${{ matrix.project }}:distZip \
#             -PndkPath=$ANDROID_NDK_HOME \
#             -Psigning.gnupg.keyName=${{ secrets.GPG_KEY_ID }} \
#             -Psigning.gnupg.passphrase=${{ secrets.GPG_PASSPHRASE }} \
#             -Prelease release

#       - name: Upload artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: ${{ matrix.project }}-artifacts
#           path: ${{ github.workspace }}/build/distributions/*.zip
#           if-no-files-found: error

#   publish:
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#     steps:
#       - uses: actions/checkout@v3

#       - name: Download all artifacts
#         uses: actions/download-artifact@v3
#         with:
#           path: artifacts

#       - name: Create Release
#         uses: softprops/action-gh-release@v1
#         with:
#           files: artifacts/**/*.zip
#           tag_name: ${{ github.sha }}
#           draft: false
#           prerelease: false
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
