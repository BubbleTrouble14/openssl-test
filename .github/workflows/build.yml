name: Build NDK Ports

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Gradle Cache
        uses: actions/cache@v3
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/native
            ~/.gradle/daemon
            ~/.gradle/buildOutputCleanup
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache NDK
        id: ndk-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/android-ndk-r26
          key: ndk-${{ runner.os }}-r26-${{ github.sha }}
          restore-keys: |
            ndk-${{ runner.os }}-r26-

      - name: Download Android NDK
        if: steps.ndk-cache.outputs.cache-hit != 'true'
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r26-linux.zip
          unzip android-ndk-r26-linux.zip
          rm android-ndk-r26-linux.zip

      - name: Get projects and build matrix
        id: set-matrix
        run: |
          # Get list of projects
          projects=$(./gradlew -q listProjects --no-daemon)
          echo "Found projects: $projects"
          echo "matrix={\"project\":$projects}" >> $GITHUB_OUTPUT

          # Now build each project in a loop
          projects_array=$(echo $projects | jq -r '.[]')
          for project in $projects_array; do
            echo "Building $project..."

            # Cache build outputs per project
            mkdir -p $project/build

            ./gradlew :$project:distZip \
              -PndkPath=${{ github.workspace }}/android-ndk-r26 \
              -Psigning.gnupg.keyName=${{ secrets.GPG_KEY_ID }} \
              -Psigning.gnupg.passphrase=${{ secrets.GPG_PASSPHRASE }} \
              -Prelease \
              --no-daemon \
              --stacktrace \
              --info \
              --scan || exit 1

            # Upload artifacts for this project
            if [ -d "${{ github.workspace }}/build/distributions" ]; then
              mkdir -p artifacts/$project
              cp ${{ github.workspace }}/build/distributions/*.zip artifacts/$project/
            fi
          done

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Upload all artifacts
        uses: actions/upload-artifact@v3
        with:
          name: all-project-artifacts
          path: artifacts/**/*.zip
          if-no-files-found: error

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*.zip
          tag_name: ${{ github.sha }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
