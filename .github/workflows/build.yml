name: Build NDK Ports

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  detect-projects:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get all projects with names
        id: set-matrix
        run: |
          # Initialize a JSON array directly
          echo '{"project":[' > matrix.json
          first=true

          # Process each project
          while read -r project; do
            project_dir=$(echo $project | tr -d '"')

            if [ -f "${project_dir}/build.gradle.kts" ]; then
              name=$(grep '^name = ' "${project_dir}/build.gradle.kts" | awk -F'"' '{print $2}')
              if [ -z "$name" ]; then
                name=$(basename ${project_dir})
              fi

              # Add comma if not first entry
              if [ "$first" = "true" ]; then
                first=false
              else
                echo ',' >> matrix.json
              fi

              # Add the project entry directly as JSON
              echo "{\"directory\":\"${project_dir}\",\"name\":\"${name}\"}" >> matrix.json
            fi
          done < <(grep "include" settings.gradle.kts | awk -F'"' '{print $2}')

          # Close the JSON array
          echo ']}' >> matrix.json

          # Set the output
          matrix=$(cat matrix.json)
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Found projects: $matrix"

  build:
    needs: detect-projects
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-projects.outputs.matrix)}}
      fail-fast: false
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get version
        id: get_version
        run: |
          # Check if the file exists first
          if [ ! -f "${{ matrix.project.directory }}/build.gradle.kts" ]; then
            echo "Error: build.gradle.kts not found in ${{ matrix.project.directory }} directory"
            exit 1
          fi

          VERSION=$(grep "val portVersion = " ${{ matrix.project.directory }}/build.gradle.kts | sed 's/.*"\(.*\)".*/\1/')
          if [[ -z "$VERSION" ]]; then
            echo "Failed to extract version"
            echo "Content of ${{ matrix.project.directory }}/build.gradle.kts:"
            cat ${{ matrix.project.directory }}/build.gradle.kts | grep -A 1 -B 1 "portVersion"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      # ... [previous Java, NDK, and GPG setup steps remain the same] ...

      - name: Build ${{ matrix.project.name }}
        run: |
          ./gradlew :${{ matrix.project.directory }}:distZip \
            -PndkPath=$ANDROID_NDK_HOME \
            -Psigning.gnupg.keyName=${{ secrets.GPG_KEY_ID }} \
            -Psigning.gnupg.passphrase=${{ secrets.GPG_PASSPHRASE }}

      - name: Prepare release artifacts
        run: |
          cd build/distributions
          # Get the existing zip file name
          ZIP_FILE=$(ls *.zip)
          # Generate checksums without renaming
          sha256sum "$ZIP_FILE" > "$ZIP_FILE.sha256"
          sha1sum "$ZIP_FILE" > "$ZIP_FILE.sha1"
          # Generate signature
          gpg --armor --detach-sign "$ZIP_FILE"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project.name }}-build-artifacts
          path: |
            build/distributions/${{ matrix.project.name }}-${{ steps.get_version.outputs.version }}.zip
            build/distributions/${{ matrix.project.name }}-${{ steps.get_version.outputs.version }}.zip.asc
            build/distributions/${{ matrix.project.name }}-${{ steps.get_version.outputs.version }}.zip.sha1
            build/distributions/${{ matrix.project.name }}-${{ steps.get_version.outputs.version }}.zip.sha256

  publish:
    needs: [build, detect-projects]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix: ${{fromJson(needs.detect-projects.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.project.name }}-build-artifacts
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/${{ matrix.project.name }}-*.zip
            artifacts/${{ matrix.project.name }}-*.asc
            artifacts/${{ matrix.project.name }}-*.sha1
            artifacts/${{ matrix.project.name }}-*.sha256
          tag_name: ${{ matrix.project.name }}-${{ needs.build.outputs.version }}
          name: ${{ matrix.project.name }} ${{ needs.build.outputs.version }}
          body: |
            ${{ matrix.project.name }} version ${{ needs.build.outputs.version }}

            ## Verification
            ```bash
            # Verify signature
            gpg --verify ${{ matrix.project.name }}-${{ needs.build.outputs.version }}.zip.asc ${{ matrix.project.name }}-${{ needs.build.outputs.version }}.zip

            # Verify checksums
            sha256sum -c ${{ matrix.project.name }}-${{ needs.build.outputs.version }}.zip.sha256
            sha1sum -c ${{ matrix.project.name }}-${{ needs.build.outputs.version }}.zip.sha1
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
