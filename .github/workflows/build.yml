name: Release Management

on:
  push:
    branches:
      - release
      - staging
  workflow_dispatch:

env:
  FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

jobs:
  detect-projects:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Get all projects
        id: set-matrix
        run: |
          projects=$(./gradlew -q listProjects --no-daemon)
          echo "Found projects: $projects"
          echo "matrix={\"project\":$projects}" >> $GITHUB_OUTPUT

  build:
    needs: detect-projects
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-projects.outputs.matrix)}}
      fail-fast: false

    outputs:
      version: ${{ steps.get_version.outputs.version }}
      release_name: ${{ steps.set_names.outputs.release_name }}
      artifact_base: ${{ steps.set_names.outputs.artifact_base }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep "val portVersion = " ${{ matrix.project }}/build.gradle.kts | sed 's/.*"\(.*\)".*/\1/')
          if [[ -z "$VERSION" ]]; then
            echo "Failed to extract version"
            echo "Content of ${{ matrix.project }}/build.gradle.kts:"
            cat ${{ matrix.project }}/build.gradle.kts | grep -A 1 -B 1 "portVersion"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Set release names
        id: set_names
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "release_name=${{ matrix.project }}-${{ steps.get_version.outputs.version }}-beta-1" >> $GITHUB_OUTPUT
            echo "artifact_base=${{ matrix.project }}-${{ steps.get_version.outputs.version }}-beta-1" >> $GITHUB_OUTPUT
          else
            echo "release_name=${{ matrix.project }}-${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "artifact_base=${{ matrix.project }}-${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          local-cache: true

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle
        run: |
          ./gradlew :${{ matrix.project }}:distZip \
            -PndkPath=$ANDROID_NDK_HOME \
            -Psigning.gnupg.keyName=${{ secrets.GPG_KEY_ID }} \
            -Psigning.gnupg.passphrase=${{ secrets.GPG_PASSPHRASE }} \
            -Prelease

      - name: Prepare release artifacts
        run: |
          cd ${{ matrix.project }}/build/distributions
          # Rename the zip file
          mv *.zip ${{ steps.set_names.outputs.artifact_base }}.zip
          # Generate checksums
          sha256sum ${{ steps.set_names.outputs.artifact_base }}.zip > ${{ steps.set_names.outputs.artifact_base }}.zip.sha256
          sha1sum ${{ steps.set_names.outputs.artifact_base }}.zip > ${{ steps.set_names.outputs.artifact_base }}.zip.sha1
          # Generate signature
          gpg --armor --detach-sign ${{ steps.set_names.outputs.artifact_base }}.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project }}-build-artifacts
          path: |
            ${{ matrix.project }}/build/distributions/${{ steps.set_names.outputs.artifact_base }}.zip
            ${{ matrix.project }}/build/distributions/${{ steps.set_names.outputs.artifact_base }}.zip.asc
            ${{ matrix.project }}/build/distributions/${{ steps.set_names.outputs.artifact_base }}.zip.sha1
            ${{ matrix.project }}/build/distributions/${{ steps.set_names.outputs.artifact_base }}.zip.sha256

  release:
    needs: [detect-projects, build]
    permissions:
      contents: write
    if: github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.release_name }}
          name: ${{ needs.build.outputs.release_name }}
          body: |
            ${{ needs.build.outputs.release_name }}

            ## Verification
            For each artifact:
            ```bash
            # Verify signature
            gpg --verify <artifact>.zip.asc <artifact>.zip

            # Verify checksums
            sha256sum -c <artifact>.zip.sha256
            sha1sum -c <artifact>.zip.sha1
            ```
          draft: false
          prerelease: ${{ github.ref == 'refs/heads/staging' }}
          files: |
            artifacts/**/*.zip
            artifacts/**/*.asc
            artifacts/**/*.sha1
            artifacts/**/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
