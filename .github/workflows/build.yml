name: Build NDK Ports

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  detect-projects:
    # Previous configuration remains the same
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-projects.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          local-cache: true

      - name: Get project information
        id: get-projects
        run: |
          chmod +x gradlew
          ./gradlew -q exportProjectInfo -PndkPath=$ANDROID_NDK_HOME
          matrix=$(cat build/ndkports-matrix.json | jq -c .)
          echo "matrix=${matrix}" >> "$GITHUB_OUTPUT"
          echo "Generated matrix configuration:"
          cat build/ndkports-matrix.json

  build:
    # Build job remains unchanged
    needs: detect-projects
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-projects.outputs.matrix)}}
    # ... rest of build job remains the same ...

  release:
    needs: [build, detect-projects]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix: ${{fromJson(needs.detect-projects.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.name }}-build-artifacts
          path: artifacts

      - name: Create Initial Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/${{ matrix.name }}-*.zip
            artifacts/${{ matrix.name }}-*.asc
            artifacts/${{ matrix.name }}-*.sha1
            artifacts/${{ matrix.name }}-*.sha256
          tag_name: ${{ matrix.name }}-${{ matrix.version }}
          name: ${{ matrix.libName }} ${{ matrix.version }}
          body: |
            NDK Ports for ${{ matrix.libName }} version ${{ matrix.version }}

            ### Maven Central
            The artifacts are being published to Maven Central. This message will be updated once publishing is complete.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs: [release, detect-projects]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix: ${{fromJson(needs.detect-projects.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.name }}-build-artifacts
          path: artifacts

      - name: Create publish script
        run: |
          cat > publish.sh << 'EOF'
          #!/bin/bash

          # Set variables from environment
          USERNAME="${MAVEN_USERNAME}"
          PASSWORD="${MAVEN_PASSWORD}"
          BUNDLE_FILE="./artifacts/${{ matrix.name }}-${{ matrix.version }}.zip"

          # Generate Bearer token
          TOKEN=$(printf "$USERNAME:$PASSWORD" | base64)

          # Upload the deployment bundle
          echo "Uploading the deployment bundle..."
          RESPONSE=$(curl --silent --request POST \
            --header "Authorization: Bearer $TOKEN" \
            --form "bundle=@$BUNDLE_FILE" \
            --form-string "name=io.github.cryptorg:${{ matrix.name }}:${{ matrix.version }}" \
            --form-string "publishingType=AUTOMATIC" \
            'https://central.sonatype.com/api/v1/publisher/upload')

          DEPLOYMENT_ID=$(echo "$RESPONSE" | tr -d '\n')

          if [ -z "$DEPLOYMENT_ID" ]; then
            echo "Failed to upload the bundle. Exiting."
            exit 1
          fi

          echo "Deployment ID: $DEPLOYMENT_ID"

          # Poll the status until it's validated or fails
          STATUS="PENDING"
          while [[ "$STATUS" == "PENDING" || "$STATUS" == "VALIDATING" ]]; do
            echo "Checking deployment status..."
            sleep 10

            RESPONSE=$(curl --silent --request POST \
              --header "Authorization: Bearer $TOKEN" \
              "https://central.sonatype.com/api/v1/publisher/status?id=$DEPLOYMENT_ID")

            STATUS=$(echo "$RESPONSE" | jq -r '.deploymentState')

            echo "Current Status: $STATUS"

            if [[ "$STATUS" == "FAILED" ]]; then
              echo "Deployment failed. Exiting."
              exit 1
            fi
          done

          if [[ "$STATUS" == "VALIDATED" ]]; then
            echo "Publishing the deployment..."
            PUBLISH_RESPONSE=$(curl --silent --request POST \
              --header "Authorization: Bearer $TOKEN" \
              "https://central.sonatype.com/api/v1/publisher/deployment/$DEPLOYMENT_ID")

            if [ $? -eq 0 ]; then
              echo "Deployment is now being published."
              echo "PUBLISH_SUCCESS=true" >> $GITHUB_ENV
            else
              echo "Failed to publish the deployment. Exiting."
              exit 1
            fi
          else
            echo "Deployment status is not validated. Status: $STATUS"
            exit 1
          fi
          EOF

          chmod +x publish.sh

      - name: Run publish script
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        run: ./publish.sh

      - name: Update Release with Maven Information
        if: env.PUBLISH_SUCCESS == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ matrix.name }}-${{ matrix.version }}
          body: |
            NDK Ports for ${{ matrix.libName }} version ${{ matrix.version }}

            ### Maven Central
            The artifacts are available on Maven Central:
            ```groovy
            implementation 'io.github.cryptorg:${{ matrix.name }}:${{ matrix.version }}'
            ```

            Direct link: [https://repo1.maven.org/maven2/io/github/cryptorg/${{ matrix.name }}/${{ matrix.version }}/](https://repo1.maven.org/maven2/io/github/cryptorg/${{ matrix.name }}/${{ matrix.version }}/)

            Sonatype link: [https://central.sonatype.com/artifact/io.github.cryptorg/${{ matrix.name }}/${{ matrix.version }}](https://central.sonatype.com/artifact/io.github.cryptorg/${{ matrix.name }}/${{ matrix.version }})
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}