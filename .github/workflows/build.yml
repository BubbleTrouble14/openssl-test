name: Build NDK Ports

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  detect-projects:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Gradle Cache
        uses: actions/cache@v3
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-detect-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-detect-${{ runner.os }}-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          # Disable built-in Gradle caching since we're using our own cache action
          cache: none

      - name: Get all projects
        id: set-matrix
        run: |
          projects=$(./gradlew -q listProjects --no-daemon)
          echo "Found projects: $projects"
          echo "matrix={\"project\":$projects}" >> $GITHUB_OUTPUT

  build:
    needs: detect-projects
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-projects.outputs.matrix)}}
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      # Cache APT packages
      - name: Cache APT packages
        uses: actions/cache@v3
        id: apt-cache
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/package-list') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # Cache Gradle files
      - name: Setup Gradle Cache
        uses: actions/cache@v3
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/native
            ~/.gradle/daemon
            ~/.gradle/buildOutputCleanup
          key: gradle-build-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-build-${{ runner.os }}-

      # Set up JDK without built-in caching
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: none

      # Cache NDK
      - name: Cache NDK
        id: ndk-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/android-ndk-r26
            ~/.android/ndk
          key: ${{ runner.os }}-ndk-r26-${{ hashFiles('**/ndk.hash') }}

      - name: Download Android NDK
        if: steps.ndk-cache.outputs.cache-hit != 'true'
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r26-linux.zip
          unzip android-ndk-r26-linux.zip
          rm android-ndk-r26-linux.zip
          echo "r26" > ndk.hash

      # Cache build outputs - only save if there was no cache hit
      - name: Cache Build Outputs
        uses: actions/cache@v3
        id: build-cache
        with:
          path: |
            **/build
            !**/build/distributions
          key: ${{ runner.os }}-build-${{ matrix.project }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.project }}-
          save-always: false

      - name: Build ${{ matrix.project }}
        run: |
          ./gradlew :${{ matrix.project }}:distZip -PndkPath=${{ github.workspace }}/android-ndk-r26 -Prelease --no-daemon

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project }}-artifacts
          path: ${{ github.workspace }}/build/distributions/*.zip
          if-no-files-found: error

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*.zip
          tag_name: ${{ github.sha }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
